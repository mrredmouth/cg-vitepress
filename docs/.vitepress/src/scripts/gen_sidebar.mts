import fs from 'node:fs';
import path from 'node:path';
// import { fileURLToPath } from 'node:url';

/**
 * 生成侧边栏配置脚本
 * 遍历 docs 目录下的所有 Markdown 文件和文件夹，生成符合 VitePress 侧边栏配置格式的对象
 * 1. 先安装 npm install ts-node typescript --save-dev
 * 2. 然后运行 npx ts-node scripts/generate-sidebar.mts
 * 
 */

// 配置项
// const DOCS_DIR = path.resolve(fileURLToPath(import.meta.url), '../../../../src');
// const OUTPUT_FILE = path.resolve(fileURLToPath(import.meta.url), '../../config/auto_sidebar.ts');
const DOCS_DIR = 'docs/src';
const OUTPUT_FILE = 'docs/.vitepress/src/config/auto_sidebar.ts';
// Generating sidebar from D:\projects\ccgProjs\vue3\cg-vitepress\docs\src 
// to D:\projects\ccgProjs\vue3\cg-vitepress\docs\.vitepress\src\config\auto_sidebar.ts

/**
 * 递归读取目录，生成侧边栏配置
 */
function generateSidebar(dir: string, basePath: string = '', prefix: string = ''): Array<{ text: string; link?: string; items?: any[] }> {
  const entries = fs.readdirSync(dir);
  const sidebar: Array<{ text: string; link?: string; items?: any[] }> = [];

  entries.forEach((entry) => {
    const fullPath = path.join(dir, entry);
    const stat = fs.statSync(fullPath);
    const relativePath = path.join(basePath, entry).replace(/\\/g, '/');

    if (stat.isDirectory()) {
      const dirEntries = fs.readdirSync(fullPath);
      // console.log('Directory entries:', dirEntries);
      let linker: { text: string; link?: string; items?: any[] }  = { text: '' };
      // 目录：作为一个侧边栏组
      linker.text = capitalizeFirstLetter(entry);
      if (dirEntries.includes('index.md')) {
        // 如果目录下有 index.md 文件，则将其作为目录的链接
        linker.link = `${prefix}/${relativePath}/`;
      }
      
      // 目录：递归处理
      const children = generateSidebar(fullPath, relativePath);
      
      if (children.length > 0) {
        linker.items = children;
      }
      sidebar.push(linker);
    } else if (entry.endsWith('.md') && entry !== 'index.md' && entry !== '404.md') {
      // Markdown 文件
      const label = path.basename(entry, '.md');
      sidebar.push({
        text: capitalizeFirstLetter(decodeURIComponent(label)),
        link: `${prefix}/${relativePath.replace('.md', '')}`,
      });
    }
  });

  return sidebar;
}

/**
 * 首字母大写
 */
function capitalizeFirstLetter(str: string): string {
  return str.charAt(0).toUpperCase() + str.slice(1);
}

// 执行生成
try {
  // 确保 docs 目录存在
  if (!fs.existsSync(DOCS_DIR)) {
    throw new Error(`Docs directory does not exist: ${DOCS_DIR}`);
  }
  const sidebarConfig = generateSidebar(DOCS_DIR);

  const fileContent = `/**
 * This file is auto-generated by scripts/generate-sidebar.mts
 * DO NOT EDIT MANUALLY
 */
export default ${JSON.stringify(sidebarConfig, null, 2)};
`;

  fs.mkdirSync(path.dirname(OUTPUT_FILE), { recursive: true });
  fs.writeFileSync(OUTPUT_FILE, fileContent);
  console.log(`✅ Generating sidebar successfully from ${DOCS_DIR} to ${OUTPUT_FILE}`);
} catch (error) {
  console.error('❌ Error generating sidebar:', error instanceof Error ? error.message : String(error));
  process.exit(1);
}

export { generateSidebar }